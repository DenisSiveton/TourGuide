# This workflow will build a Java project with Maven, execute the different tests and generate the associate jar on GitHub Actions servers for downloading
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-maven

# The CI pipelin process is as follows:

  #        1                  2                 3
  #   -------------     ------------     ---------------
  #   --         --     --        --     --           --  
  # ----  Build  ---------  Test  ---------  Package  ----
  #   --         --     --        --     --           --
  #   -------------     ------------     ---------------
  
name: Java CI with Maven

on:
  push:
    branches:
    - master
    - develop
  pull_request:
    branches:
    - master

jobs:
  Build:
    runs-on: ubuntu-latest

    steps:
    - name: Check out Repository
      uses: actions/checkout@v3
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: maven
      
    # Building step : make sure the source code compiles.
    - name: Build
      working-directory : ./TourGuide
      run: mvn -B package --file pom.xml -Dmaven.test.skip=true
      
  Test:
    needs: Build
    runs-on: ubuntu-latest

    steps:
    - name: Check out Repository
      uses: actions/checkout@v3
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: maven
    # Testing step : make sure all tests created by developpers are green to ensure fiability
    - name: Test
      working-directory : ./TourGuide
      run: mvn test


  Package:
    needs: [Build, Test]
    runs-on: ubuntu-latest

    steps:
    - name: Check out Repository
      uses: actions/checkout@v3
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: maven
    - name: Generate jar file
      working-directory : ./TourGuide
      run: mvn -B package --file pom.xml -Dmaven.test.skip=true
      
    # Refactoring step : Place all the JAR files in a specific folder
    - name: Packaging 1/2
      working-directory : ./TourGuide
      run: mkdir staging && cp target/*.jar staging
    
    # Packaging step : Once the building and testing steps are validated, an artifact is generated for deployment.
    - name: Packaging 2/2
      uses: actions/upload-artifact@v4
      with:
        name: Package
        path: ./TourGuide/staging
