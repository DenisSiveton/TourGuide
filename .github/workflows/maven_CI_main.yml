# This workflow will build a Java project with Maven, and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-maven

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: Java CI with Maven

on:
  push:
    branches:
    - master
    - develop
  pull_request:
    branches:
    - master

jobs:
  CI_pipeline:

    runs-on: ubuntu-latest

    steps:
    - name: Check out Repository
      uses: actions/checkout@v3
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: maven
      
    # Building step : make sure the source code compiles.
    - name: Build
      working-directory : ./TourGuide
      run: mvn -B package --file pom.xml -Dmaven.test.skip=true

    # Testing step : make sure all tests created by developpers are green to ensure fiability
    - name: Test
      working-directory : ./TourGuide
      run: mvn test

    # Refactoring step : Place all the JAR files in a specific folder
    - name: Package 1/2
      working-directory : ./TourGuide
      run: mkdir staging && cp target/*.jar staging
    
    # Packaging step : Once the building and testing steps are validated, an artifact is generated for deployment.
    - name: Package 2/2
      uses: actions/upload-artifact@v4
      with:
        name: Package
        path: ./TourGuide/staging
    # Optional: Uploads the full dependency graph to GitHub to improve the quality of Dependabot alerts this repository can receive
   # - name: Update dependency graph
    #  uses: advanced-security/maven-dependency-submission-action@571e99aab1055c2e71a1e2309b9691de18d6b7d6
